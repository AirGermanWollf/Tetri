.data 
#Colores de piezas marcos  y otros elementos "visuales del juego"
colorc: .word 0xFFFF00
colori: .word 0x0000CC
colors: .word 0xFF0000
colorz: .word 0x00FF00
colorl: .word 0xFF8000
colorj: .word 0xFF3399
colort: .word 0xCC0066
colorm: .word 0x606060
rojo:	.word 0xFF0000
colorpuntos: .word 0x0000CD
tecla: 	.word 0x990099
tecla2: .word 0x660066
blanco: .word 0xFFFFFF
#Direcciones de inicio del mapa y donde aparecen las piezas
diro: 	.word 0x10008000
dirs: 	.word 0x10008118
#Mensajes del sistema 
espera: 	.asciiz "\n ||||||||||	Presiona una tecla para jugar	||||||||||"
espera2: 	.asciiz "\n ||||||||||	Presiona una tecla para empezar la partida	||||||||||"
nivel:		.asciiz "\n Nivel Nº: "
vidas: 		.asciiz "\n Nº de vidas: "
pasedenivel: 	.asciiz "\n ||||||||||	Felicidades pasaste al siguiente nivel :D	||||||||||"
puntosnivel: 	.asciiz "\n Puntos acumulados: "
pasedenivelf:	.asciiz "\n ||||||||||	Felicidades pasaste al nivel fantasma  0_0  ||||||||||   "
perdio: 	.asciiz "\n Perdiste :C Obtuviste en total: "
perdio2: 	.asciiz " puntos"
perdiovida:	.asciiz "\n Perdiste una vida :C "
reiniciar:	.asciiz "\n Presiona 0 para finalizar el juego o cualquier otra tecla para reiniciar"

.text
#Declaarcion de Macros para que todo funciones como debe

###############################################################################
#Imprime un mensaje de las lista declarada
.macro mensaje %label
la $a0,%label
li $v0,4
syscall
.end_macro 
###############################################################################
#Imprime un numero
.macro mensajen %numero
move $a0,%numero
li $v0,1
syscall
.end_macro 
###############################################################################
#Imprime el cartel de inicio del juego TETRI
.macro cartelinicial

lw $t1,colori
lw $t2,colors
lw $t3,colorz
lw $t4,colorl
lw $t5,colorj

t:
sw $t1,1548($gp)
sw $t1,1552($gp)
sw $t1,1556($gp)
sw $t1,1560($gp)
sw $t1,1564($gp)
sw $t1,1684($gp)
sw $t1,1812($gp)
sw $t1,1940($gp)
sw $t1,2068($gp)
sw $t1,2196($gp)

e:
sw $t2,1576($gp)
sw $t2,1580($gp)
sw $t2,1584($gp)
sw $t2,1704($gp)
sw $t2,1832($gp)
sw $t2,1836($gp)
sw $t2,1840($gp)
sw $t2,1960($gp)
sw $t2,2088($gp)
sw $t2,2216($gp)
sw $t2,2220($gp)
sw $t2,2224($gp)

t2:
sw $t3,1596($gp)
sw $t3,1600($gp)
sw $t3,1604($gp)
sw $t3,1608($gp)
sw $t3,1612($gp)
sw $t3,1732($gp)
sw $t3,1860($gp)
sw $t3,1988($gp)
sw $t3,2116($gp)
sw $t3,2244($gp)

r:
sw $t4,1624($gp)
sw $t4,1628($gp)
sw $t4,1632($gp)
sw $t4,1636($gp)
sw $t4,1764($gp)
sw $t4,1892($gp)
sw $t4,1752($gp)
sw $t4,1880($gp)
sw $t4,1884($gp)
sw $t4,1888($gp)
sw $t4,2008($gp)
sw $t4,2012($gp)
sw $t4,2136($gp)
sw $t4,2264($gp)
sw $t4,2144($gp)
sw $t4,2276($gp)

i:
sw $t5,1648($gp)	#Se podria reducir el codigo implementando loops 
sw $t5,1776($gp)	#pero no vale la pena ya que la reduccion de codigo
sw $t5,1904($gp)	#no es tan significativa
sw $t5,2032($gp)
sw $t5,2160($gp)
sw $t5,2288($gp)
.end_macro	 
###############################################################################
#Borra el cartel de inicio del juego TETRI
.macro borrarcartel

t:
sw $zero,1548($gp)
sw $zero,1552($gp)
sw $zero,1556($gp)
sw $zero,1560($gp)
sw $zero,1564($gp)
sw $zero,1684($gp)
sw $zero,1812($gp)
sw $zero,1940($gp)
sw $zero,2068($gp)
sw $zero,2196($gp)

e:
sw $zero,1576($gp)
sw $zero,1580($gp)
sw $zero,1584($gp)
sw $zero,1704($gp)
sw $zero,1832($gp)
sw $zero,1836($gp)
sw $zero,1840($gp)
sw $zero,1960($gp)
sw $zero,2088($gp)
sw $zero,2216($gp)
sw $zero,2220($gp)
sw $zero,2224($gp)

t2:
sw $zero,1596($gp)
sw $zero,1600($gp)
sw $zero,1604($gp)
sw $zero,1608($gp)
sw $zero,1612($gp)
sw $zero,1732($gp)
sw $zero,1860($gp)
sw $zero,1988($gp)
sw $zero,2116($gp)
sw $zero,2244($gp)

r:
sw $zero,1624($gp)
sw $zero,1628($gp)
sw $zero,1632($gp)
sw $zero,1636($gp)
sw $zero,1764($gp)
sw $zero,1892($gp)
sw $zero,1752($gp)
sw $zero,1880($gp)
sw $zero,1884($gp)
sw $zero,1888($gp)
sw $zero,2008($gp)
sw $zero,2012($gp)
sw $zero,2136($gp)
sw $zero,2264($gp)
sw $zero,2144($gp)
sw $zero,2276($gp)

i:
sw $zero,1648($gp)
sw $zero,1776($gp)
sw $zero,1904($gp)
sw $zero,2032($gp)
sw $zero,2160($gp)
sw $zero,2288($gp)
.end_macro 
###############################################################################
#Reproduce un sonido para la transcicion de niveles
.macro sonido
move $a0,$zero
move $a1,$zero
move $a2,$zero
move $a3,$zero
  li $a0, 62 
  li $a1, 3000		#Duracion del sonido
  addi $a2, $a2,127	#El efecto en si (tipo de sonido)
  li $a3, 127
  la $v0, 33
  syscall             
  .end_macro 
###############################################################################
#Imprime el tablero de juego
.macro tablero
move $t1, $zero 	#Contador de ancho y largo
move $t2, $gp 		#Apuntador 
add $t2, $t2, 132

loop:			#Loop para las barras horizontales
lw $t3, colorm	
sw $t3, ($t2)
sw $t3, 2816($t2)
addi $t1,$t1,1
addi $t2, $t2, 4
blt $t1, 12, loop

lw $t2, diro
add $t2, $t2, 132
move $t1, $zero

loop2:			#Loop para las barras laterales
sw $t3, 128($t2)
sw $t3, 172($t2)
addi $t1,$t1, 1
addi $t2,$t2, 128
blt $t1, 21, loop2
.end_macro
###############################################################################
#Imprime el tablero de vidas
.macro tablerovidas
move $t1, $zero 	#Contador de ancho y largo
move $t2, $gp 		#Apuntador 
add $t2, $t2, 3344

loop1:			#Loop para las barras horizontales
lw $t3, colorm	
sw $t3, ($t2)
sw $t3, 384($t2)
addi $t1,$t1,1
addi $t2, $t2, 4
blt $t1, 11, loop1

lw $t2, diro
add $t2, $t2, 3344
move $t1, $zero
loop2:			#Loop para las barras laterales
sw $t3, 128($t2)
sw $t3, 168($t2)
addi $t1,$t1, 1
addi $t2,$t2, 128
blt $t1, 2, loop2

lw $t4, colorc		#Color de la barra de vidas
lw $t2, diro
add $t2, $t2, 3476
move $t1, $zero

loop:
sw $t4,($t2)
sw $t4,128($t2)
addi $t2,$t2,4
addi $t1,$t1,1
bne $t1,9,loop
.end_macro
###############################################################################
#Imprime la barra de puntos
.macro tableropuntos
move $t1, $zero 
move $t2, $gp 	
add $t2, $t2, 316
loop:		
lw $t3, colorm	
sw $t3, ($t2)
sw $t3, 2688($t2)
addi $t1,$t1,1
addi $t2, $t2, 4
blt $t1, 3, loop

lw $t2, diro
add $t2, $t2, 316
move $t1, $zero
loop2:		
sw $t3, 128($t2)
sw $t3, 136($t2)
addi $t1,$t1, 1
addi $t2,$t2, 128
blt $t1, 20, loop2
.end_macro
###############################################################################
#Quita una vida de la barra de vidas
.macro quitarvida
move $s1,$zero
lw $s1,4($gp)		#Lugar donde se almacenan las vidas 
addi $s1,$s1,-1
beq $s1,2, quitar1	#Dependiendo de cuantas vidas se tienen procese
beq $s1,1, quitar2
beq $s1,0, fin		#Si ya no le quedan vidas pierdes

quitar1:
lw $t2, diro
add $t2, $t2, 3508
move $t1, $zero
loop:
sw $zero,($t2)
sw $zero,128($t2)
addi $t2,$t2,-4
addi $t1,$t1,1
bne $t1,3,loop
b final

quitar2:
lw $t2, diro
add $t2, $t2, 3508
move $t1, $zero
loop2:
sw $zero,($t2)
sw $zero,128($t2)
addi $t2,$t2,-4
addi $t1,$t1,1
bne $t1,6,loop2
b final

fin:
lw $t2, diro
add $t2, $t2, 3508
move $t1, $zero
loop3:
sw $zero,($t2)
sw $zero,128($t2)
addi $t2,$t2,-4
addi $t1,$t1,1
bne $t1,9,loop3

mensaje perdio
lw $s2,12($gp)
mul $s2,$s2,10
mensajen $s2
mensaje perdio2
li $v0,32		#espera un rato para terminar la partida (animacion)
addi $a0, $zero, 3000		
syscall
j Findelapartida

final:
mensaje perdiovida
li $v0,32		
addi $a0, $zero, 1000		
syscall
sw $s1,4($gp)
j Nivel
.end_macro 
###############################################################################
#Limpia el tablero
.macro limpiartablero
move $s1,$zero #contador
move $s2,$zero #contador
move $t3,$zero #almacenamientotemporal
move $t4,$zero #almacenamientotemporal2
move $s3,$gp	#Direccion de inicio 
move $s4,$gp
move $s5,$zero #contador (Nºo de fila)

addi $s3,$s3,2824	#Direccion de inicio 
addi $s4,$s4,2860	#Direccion de inicio 

loop1:
sw $zero,($s3)
sw $zero,($s4)
li $v0,32		
addi $a0, $zero, 25		
syscall
addi $s3,$s3,4
addi $s4,$s4,-4
addi $s1,$s1,1
bne  $s1,5,loop1

loop2:
addi $s5,$s5,1
resetearl $s5
addi $s2,$s2,1
bne $s2,21, loop1
.end_macro
###############################################################################
#'T' titilante que avisa que se tiene que presionar una tecla
.macro espera 
lw $s1,tecla
lw $s2,tecla2

LoopDeEspera:	
sw $s2 488($gp)
sw $s2 484($gp)
sw $s2 492($gp)
sw $s2 616($gp)
sw $s2 744($gp)
sw $s2 872($gp)				
lw $t2, 0xFFFF0000
li $v0,32		
addi $a0, $zero, 500		
syscall
sw $s1 488($gp)
sw $s1 484($gp)
sw $s1 492($gp)
sw $s1 616($gp)
sw $s1 744($gp)
sw $s1 872($gp)	
li $v0,32		
addi $a0, $zero, 500		
syscall		
blez $t2, LoopDeEspera
sw $zero 488($gp)
sw $zero 484($gp)
sw $zero 492($gp)
sw $zero 616($gp)
sw $zero 744($gp)
sw $zero 872($gp)
sw $zero, 0xFFFF0000
.end_macro 
###############################################################################
#Generador de numeros random entre 1 y 7 (Nro de piezas)
.macro random 
li $a1, 7
li $v0, 42   #random
syscall
addi $a0,$a0,1
move $s0, $a0
.end_macro
###############################################################################
#Tiempo de espera para que baje la pieza
.macro tiempo %msegundos #Parametro para que varie en funcion del nivel
li $v0,32		
add $a0, $zero, %msegundos		
syscall
.end_macro 
###############################################################################
#Imprime la pieza
.macro empiezafigura
move $t7,$zero
bgt $s0,6,figura7	#Depende de que numero haya generado el random 
bgt $s0,5,figura6
bgt $s0,4,figura5
bgt $s0,3,figura4
bgt $s0,2,figura3
bgt $s0,1,figura2
bgt $s0,0,figura1

figura1:
lw $t1, colorc
sw $t1, ($t0)
sw $t1, 4($t0)
sw $t1, 128($t0)
sw $t1, 132($t0)
b final

figura2:
lw $t1, colori
sw $t1, ($t0) 
sw $t1, 128($t0)
sw $t1, 256($t0)
sw $t1, 384($t0)
b final 

figura3:
lw $t1, colors
sw $t1, ($t0)
sw $t1, 4($t0)
sw $t1, 124($t0)
sw $t1, 128($t0)
b final

figura4:
lw $t1, colorz
sw $t1, ($t0)
sw $t1, 4($t0)
sw $t1, 132($t0)
sw $t1, 136($t0)
b final

figura5:
lw $t1, colorl
sw $t1, ($t0) 
sw $t1, 128($t0)
sw $t1, 256($t0)
sw $t1, 260($t0)
b final

figura6:
lw $t1, colorj
sw $t1, ($t0) 
sw $t1, 128($t0)
sw $t1, 256($t0)
sw $t1, 252($t0)
b final

figura7:
lw $t1, colort
sw $t1, -4($t0) 
sw $t1, ($t0)
sw $t1, 4($t0)
sw $t1, 128($t0)
b final

final: 
.end_macro 
###############################################################################
#Guarda los 4 bloques que se usan en cada figura en distintos registros y manda 
#mover la pieza 
.macro referencia
move $s1, $t0
bgt $s0,6,mover7
bgt $s0,5,mover6
bgt $s0,4,mover5
bgt $s0,3,mover4
bgt $s0,2,mover3
bgt $s0,1,mover2
bgt $s0,0,mover1

mover1:
addi $s2, $s1, 4
addi $s3, $s1, 128
addi $s4, $s1, 132
b final

mover2:
addi $s2, $s1, 128
addi $s3, $s1, 256
addi $s4, $s1, 384
b final

mover3:
addi $s2, $s1, 4
addi $s3, $s1, 124
addi $s4, $s1, 128
b final

mover4:
addi $s2, $s1, 4
addi $s3, $s1, 132
addi $s4, $s1, 136
b final

mover5:
addi $s2, $s1, 128
addi $s3, $s1, 256
addi $s4, $s1, 260
b final

mover6:
addi $s2, $s1, 128
addi $s3, $s1, 256
addi $s4, $s1, 252
b final

mover7:
addi $s2, $s1, -4
addi $s3, $s1, 4
addi $s4, $s1, 128
b final

final:		
.end_macro 
###############################################################################
#Determina cuando una pieza choco con otra o con el suelo
.macro choque %ref1 %ref2 %ref3 %ref4	#Parametros para que sea un choque general

lw $t2, 128(%ref1)
beqz $t2,next
bne $t1,$t2,choco

next:
lw $t3, 128(%ref2)
beqz $t3,next2
bne $t1,$t3,choco

next2:
lw $t4, 128(%ref3)
beqz $t4, next3
bne $t1,$t4,choco

next3:
lw $t5, 128(%ref4)
beqz $t5,nada
bne $t1,$t5,choco
b nada

choco:
beq $t9,4,choquefantasma	#Determina si esta en el nivel Fantasma 0_0
addi $t1,$t1, 1
sw $t1,(%ref1)
sw $t1,(%ref2)
sw $t1,(%ref3)
sw $t1,(%ref4)
eliminarlinea
b  SiguientePieza
choquefantasma:		#Pone la piezas en blanco cuando chocan (las hace fantasmas)
lw $t2,blanco 			
sw $t2,(%ref1)
sw $t2,(%ref2)
sw $t2,(%ref3)
sw $t2,(%ref4)
eliminarlinea
b  SiguientePieza
nada: #no hace nada
.end_macro 
###############################################################################
#Comprueba si la pieza se puede mover a la derecha 
.macro comprobarderecha %ref1 %ref2 %ref3 %ref4

lw $t2, 4(%ref1)
beqz $t2,next
bne $t1,$t2,no

next:
lw $t3, 4(%ref2)
beqz $t3,next2
bne $t1,$t3,no

next2:
lw $t4, 4(%ref3)
beqz $t4, next3
bne $t1,$t4,no

next3:
lw $t5, 4(%ref4)
beqz $t5,si
bne $t1,$t5,no

si:
addi $s5,$s5,1
b final
no:
move $s5,$zero
final:
.end_macro 
###############################################################################
#Comprubeba si la pieza se puede mover a la izquierda
.macro comprobarizquierda %ref1 %ref2 %ref3 %ref4

lw $t2, -4(%ref1)
beqz $t2,next
bne $t1,$t2,no

next:
lw $t3, -4(%ref2)
beqz $t3,next2
bne $t1,$t3,no

next2:
lw $t4, -4(%ref3)
beqz $t4, next3
bne $t1,$t4,no

next3:
lw $t5, -4(%ref4)
beqz $t5,si
bne $t1,$t5,no

si:
addi $s5,$s5,1
b final
no:
move $s5,$zero
final:
.end_macro 
###############################################################################
#Imprime la pieza en la posicion dada
.macro imprimir %ref1 %ref2 %ref3 %ref4
sw $t1,(%ref1)
sw $t1,(%ref2)
sw $t1,(%ref3)
sw $t1,(%ref4)
.end_macro
###############################################################################
#Borra la figura momentanamente
.macro limpiar %ref1 %ref2 %ref3 %ref4
sw $zero,(%ref1)
sw $zero,(%ref2)
sw $zero,(%ref3)
sw $zero,(%ref4)
.end_macro
###############################################################################
#Mueve la pieza segun lo indicado
.macro direccion 

lw $t6,0xFFFF0000 
beqz $t6, final2
lw $t2, 0xFFFF0004		#Carga la dirreccion puesta 

beqz $t2, final
beq $t2,100,derecha
beq $t2,115,rotar
beq $t2,97,izquierda
beq $t2,32,bajarpieza
b final
		
izquierda:		
comprobarizquierda $s1,$s2,$s3,$s4
bne $s5,1,final 
limpiar $s1,$s2,$s3,$s4
addi $s1, $s1, -4 
addi $s2, $s2, -4 
addi $s3, $s3, -4 
addi $s4, $s4, -4 
b semovio

bajarpieza:
li $v0,32		
addi $a0, $zero, 50	
syscall
limpiar	$s1,$s2,$s3,$s4	
bajar	$s1,$s2,$s3,$s4
imprimir $s1,$s2,$s3,$s4
choque $s1,$s2,$s3,$s4
b bajarpieza

rotar:
rotarfiguras	#Macro para la rotacion de figuras	
b semovio

derecha:		
comprobarderecha $s1,$s2,$s3,$s4
bne $s5,1,final 
limpiar $s1,$s2,$s3,$s4
addi $s1, $s1, 4 
addi $s2, $s2, 4 
addi $s3, $s3, 4 
addi $s4, $s4, 4 
b semovio

semovio: 
imprimir $s1,$s2,$s3,$s4
final:
move $s5,$zero
final2:
.end_macro 
###############################################################################
#Suma a las referencias 128 para bajar la pieza
.macro bajar %ref1 %ref2 %ref3 %ref4
addi %ref1, %ref1, 128 
addi %ref2, %ref2, 128 
addi %ref3, %ref3, 128 
addi %ref4, %ref4, 128 
.end_macro
###############################################################################
#Verifica si se puede poner otra pieza en el tablero
.macro verifica
move $t3,$zero
move $t2,$gp
addi $t2,$t2,264

loop3:
lw $t4,($t2)
lw $t5,128($t2)
bnez $t4,lleno
bnez $t5,lleno
addi $t2,$t2,4
addi $t3,$t3,1
bne  $t3,10,loop3
b final

lleno:
quitarvida	#Si no se puede se pierde una vida :C
final: 
.end_macro 
###############################################################################
#Rota las figuras dependiendo el caso
.macro rotarfiguras

bgt $s0,6,rota7
bgt $s0,5,rota6
bgt $s0,4,rota5
bgt $s0,3,rota4
bgt $s0,2,rota3
bgt $s0,1,rota2
bgt $s0,0,rota1

rota1:
b final

rota2:
rotacionf2
b final 

rota3:
rotacionf3
b final

rota4:
rotacionf4
b final

rota5:
rotacionf5
b final

rota6:
rotacionf6	#Cada figura tiene un rotar particular para asegurarse de que 
b final		#no choque con otras piezas cuando gira 

rota7:
rotacionf7

final:
.end_macro 
###############################################################################
#Cromprueba si la pieza 2 se puede rotar y la rota
.macro rotacionf2 

beqz $t7,comp
bnez $t7,comp2

comp:
lw $t2, -4($s2)
lw $t3, 4($s2)
lw $t4, 8($s2)
add $t2,$t2,$t3
add $t2,$t2,$t4
bnez $t2, nada
limpiar $s1,$s2,$s3,$s4
addi $s1, $s1, 124 
addi $s3, $s3, -124 
addi $s4, $s4, -248
addi $t7,$t7,1
b seroto

comp2:
lw $t2, -128($s2)
lw $t3, 128($s2)
lw $t4, 256($s2)
add $t2,$t2,$t3
add $t2,$t2,$t4
bnez $t2, nada
limpiar $s1,$s2,$s3,$s4
addi $s1, $s1, -124 
addi $s3, $s3, 124 
addi $s4, $s4, 248
move $t7,$zero
b seroto

nada:
j Bajar 
seroto:
.end_macro 
###############################################################################
#Cromprueba si la pieza 3 se puede rotar y la rota
.macro rotacionf3

beqz $t7,comp
bnez $t7,comp2

comp:
lw $t2, -128($s1)
lw $t3, 132($s1)
add $t2,$t2,$t3
bnez $t2, nada
limpiar $s1,$s2,$s3,$s4
addi $s2, $s2, -132 
addi $s3, $s3, 8 
addi $s4, $s4, -124
addi $t7,$t7,1
b seroto

comp2:
lw $t2, 128($s1)
lw $t3, 124($s1)
add $t2,$t2,$t3
bnez $t2, nada
limpiar $s1,$s2,$s3,$s4
addi $s2, $s2, 132
addi $s3, $s3, -8 
addi $s4, $s4, 124
move $t7,$zero
b seroto

nada:
j Bajar 
seroto:
.end_macro 
###############################################################################
#Cromprueba si la pieza 4 se puede rotar y la rota
.macro rotacionf4

beqz $t7,comp
bnez $t7,comp2

comp:
lw $t2, -124($s2)
lw $t3, 4($s2)
add $t2,$t2,$t3
bnez $t2, nada
limpiar $s1,$s2,$s3,$s4
addi $s1, $s1, 132 
addi $s3, $s3, -124
addi $s4, $s4, -256
addi $t7,$t7,1
b seroto

comp2:
lw $t2, -4($s2)
lw $t3, 132($s2)
add $t2,$t2,$t3
bnez $t2, nada
limpiar $s1,$s2,$s3,$s4
addi $s1, $s1, -132 
addi $s3, $s3, 124
addi $s4, $s4, 256
move $t7,$zero
b seroto

nada:
j Bajar 
seroto:
.end_macro 
###############################################################################
#Cromprueba si la pieza 5 se puede rotar y la rota
.macro rotacionf5

beqz $t7,comp
beq $t7,1,comp2
beq $t7,2,comp3
beq $t7,3,comp4

comp:
lw $t2, -124($s2)
lw $t3, 4($s2)
lw $t4, -4($s2)
add $t2,$t2,$t3
add $t2,$t2,$t4
bnez $t2, nada
limpiar $s1,$s2,$s3,$s4
addi $s1, $s1, 124 
addi $s3, $s3, -124 
addi $s4, $s4, -256
addi $t7,$t7,1
b seroto

comp2:
lw $t2, -128($s2)
lw $t3, 128($s2)
lw $t4, -132($s2)
add $t2,$t2,$t3
add $t2,$t2,$t4
bnez $t2, nada
limpiar $s1,$s2,$s3,$s4
addi $s1, $s1, 132 
addi $s3, $s3, -132
addi $s4, $s4, -8
addi $t7,$t7,1
b seroto

comp3:
lw $t2, 4($s2)
lw $t3, -4($s2)
lw $t4, 124($s2)
add $t2,$t2,$t3
add $t2,$t2,$t4
bnez $t2, nada
limpiar $s1,$s2,$s3,$s4
addi $s1, $s1, -124 
addi $s3, $s3, 124
addi $s4, $s4, 256
addi $t7,$t7,1
b seroto

comp4:
lw $t2, -128($s2)
lw $t3, 128($s2)
lw $t4, 132($s2)
add $t2,$t2,$t3
add $t2,$t2,$t4
bnez $t2, nada
limpiar $s1,$s2,$s3,$s4
addi $s1, $s1, -132 
addi $s3, $s3, 132
addi $s4, $s4, 8
move $t7,$zero
b seroto

nada:
j Bajar 
seroto:
.end_macro 
###############################################################################
#Cromprueba si la pieza 6 se puede rotar y la rota
.macro rotacionf6

beqz $t7,comp
beq $t7,1,comp2
beq $t7,2,comp3
beq $t7,3,comp4

comp:
lw $t2, 4($s2)
lw $t3, -4($s2)
lw $t4, 132($s2)
add $t2,$t2,$t3
add $t2,$t2,$t4
bnez $t2, nada
limpiar $s1,$s2,$s3,$s4
addi $s1, $s1, 124 
addi $s3, $s3, -124 
addi $s4, $s4, 8
addi $t7,$t7,1
b seroto

comp2:
lw $t2, -128($s2)
lw $t3, 128($s2)
lw $t4, -124($s2)
add $t2,$t2,$t3
add $t2,$t2,$t4
bnez $t2, nada
limpiar $s1,$s2,$s3,$s4
addi $s1, $s1, 132 
addi $s3, $s3, -132
addi $s4, $s4, -256
addi $t7,$t7,1
b seroto

comp3:
lw $t2, 4($s2)
lw $t3, -4($s2)
lw $t4, -132($s2)
add $t2,$t2,$t3
add $t2,$t2,$t4
bnez $t2, nada
limpiar $s1,$s2,$s3,$s4
addi $s1, $s1, -124 
addi $s3, $s3, 124
addi $s4, $s4, -8
addi $t7,$t7,1
b seroto

comp4:
lw $t2, -128($s2)
lw $t3, 128($s2)
lw $t4, 124($s2)
add $t2,$t2,$t3
add $t2,$t2,$t4
bnez $t2, nada
limpiar $s1,$s2,$s3,$s4
addi $s1, $s1, -132 
addi $s3, $s3, 132
addi $s4, $s4, 256
move $t7,$zero
b seroto

nada:
j Bajar 
seroto:
.end_macro 
###############################################################################
#Cromprueba si la pieza 7 se puede rotar y la rota
.macro rotacionf7

beqz $t7,comp
beq $t7,1,comp2
beq $t7,2,comp3
beq $t7,3,comp4

comp:
lw $t2, -128($s2)
bnez $t2, nada
limpiar $s1,$s2,$s3,$s4
addi $s2, $s2, 132
addi $s3, $s3, -132 
addi $s4, $s4, -124
addi $t7,$t7,1
b seroto

comp2:
lw $t2, -4($s2)
bnez $t2, nada
limpiar $s1,$s2,$s3,$s4
addi $s2, $s2, -124 
addi $s3, $s3, 124
addi $s4, $s4, -132
addi $t7,$t7,1
b seroto

comp3:
lw $t2, 128($s2)
bnez $t2, nada
limpiar $s1,$s2,$s3,$s4
addi $s2, $s2, -132 
addi $s3, $s3, 132
addi $s4, $s4, 124
addi $t7,$t7,1
b seroto

comp4:
lw $t2, 4($s2)
bnez $t2, nada
limpiar $s1,$s2,$s3,$s4
addi $s2, $s2, 124
addi $s3, $s3, -124
addi $s4, $s4, 132
move $t7,$zero
b seroto

nada:
j Bajar 
seroto:
.end_macro 
###############################################################################
#Resetea los registros relacionado con las macros de eliminar fila (fines tecnicos)
.macro resetearl %contador2
move $s3,$gp		
move $s4,$gp
addi $s3,$s3,2824
addi $s4,$s4,2860
move $s1,$zero
move $t3,$zero
move $t4,$zero
mul $t3,%contador2,-128
mul $t4,%contador2,-128
add $s3,$s3,$t3
add $s4,$s4,$t4
.end_macro 
###############################################################################
#Elimina las lineas horizontales creadas por las fichas 
.macro eliminarlinea
move $s1,$zero #contador
move $s2,$zero #contador
move $t3,$zero #almacenamientotemporal
move $t4,$zero #almacenamientotemporal2
move $s3,$gp	#Direccion de inicio 
move $s4,$gp
move $s5,$zero #contador (Nºo de fila)

addi $s3,$s3,2824	#Direccion de inicio del mapeo
addi $s4,$s4,2860	#Direccion de inicio del mapeo


loop1:
lw $t1,($s3)
beqz $t1,loop2
lw $t2,($s4)
beqz $t2,loop2
addi $s3,$s3,4
addi $s4,$s4,-4
addi $s1,$s1,1
bne  $s1,5,loop1
eliminarfila 

loop2:
addi $s5,$s5,1
resetearl $s5
addi $s2,$s2,1
bne $s2,20, loop1
.end_macro 
###############################################################################
#Elimina la fila 
.macro eliminarfila 
move $s6,$s5
move $s7,$s2
resetearl $s6

loop1:
sw $zero,($s3)		#Animacion para que se vea la eliminacion
sw $zero,($s4)
addi $s3,$s3,4
addi $s4,$s4,-4
addi $s1,$s1,1
bne  $s1,5,loop1
li $v0,32		
add $a0, $zero, 100	#Tiempo para que se tarde y la animacion sea mas notoria		
syscall
resetearl $s6

loop2:
lw $t1,-128($s3)
sw $t1,($s3)
lw $t2,-128($s4) 		#Eliminamos la Fila en la posicion especificada poniendo
sw $t2,($s4)			#el contenido de memoria que esta arriba abajo
addi $s3,$s3,4
addi $s4,$s4,-4
addi $s1,$s1,1
bne  $s1,5,loop2

loop3:
addi $s6,$s6,1
resetearl $s6
addi $s7,$s7,1
bne $s7,20,loop2
addi $s5,$s5,-1
sumarpunto $t9
verificapuntos
.end_macro 
###############################################################################
#Suma un punto dependiendo del nivel cuando se elimina una fila
.macro sumarpunto %nivel
move $s1,$gp
move $s4,$zero
addi $s1,$s1,2880
lw $s2,8($gp)		#contador de puntos
lw $t6,12($gp)
addi $t6,$t6,1
sw $t6,12($gp)		#Lugar donde se guardan los puntos
lw $s3,colorpuntos		#color de los puntos

beq %nivel,1,puntos1
beq %nivel,2,puntos2
bge %nivel,3,puntos3

puntos1:
mul $s4,$s2,-128
add $s1,$s1,$s4
sw $s3,($s1)
sw $s3,-128($s1)
sw $s3,-256($s1)
sw $s3,-384($s1)
addi $s2,$s2,4
b listo

puntos2:
mul $s4,$s2,-128
add $s1,$s1,$s4
sw $s3,($s1)
sw $s3,-128($s1)
addi $s2,$s2,2
b listo

puntos3:
mul $s4,$s2,-128
add $s1,$s1,$s4
sw $s3,($s1)
addi $s2,$s2,1
b listo

listo:
sw $s2,8($gp)
.end_macro 
###############################################################################
#Verifica si se lleno la barra de puntos para pasar al siguiente nivel
.macro verificapuntos
move $t3,$zero
move $t5,$zero
lw $t4,448($gp)
bnez $t4,siguientenivel
b final

siguientenivel:
sw $zero,8($gp)
addi $t9,$t9,1
beq $t9,4,nivelfantasma
addi $t8,$t8,-150
nivelfantasma:
lw $s1,4($gp)
beq $s1,3,full
addi $s1,$s1,1		#Agrego una vida si no tiene 3
recargarvidas $s1
sw $s1,4($gp)
full:
limpiarpuntos
beq $t9,4,mensajefantasma
mensaje pasedenivel
b next
mensajefantasma:
mensaje pasedenivelf
next:
li $v0,32		
addi $a0, $zero, 4000		
syscall
mensaje puntosnivel
lw $t2,12($gp)
mul $t3,$t2,10
mensajen $t3
li $v0,32		
addi $a0, $zero, 1000		
syscall
b Nivel
final:
.end_macro 
###############################################################################
#Recarga el cuadro de vidas
.macro recargarvidas %nrovidas
beq %nrovidas,3,full
beq %nrovidas,2,re

full:
tablerovidas
b final

re:
move $t1, $zero 
move $t2, $gp 	#Apuntador 
lw $t4, colorc
lw $t2, diro
add $t2, $t2, 3476
loop:
sw $t4,($t2)
sw $t4,128($t2)
addi $t2,$t2,4
addi $t1,$t1,1
bne $t1,6,loop
final:
.end_macro 
###############################################################################
#Limpia la barra de puntos de forma animada
.macro limpiarpuntos
move $s1,$gp
move $s4,$zero
addi $s1,$s1,2880

loop:
sw $zero,($s1)
addi $s1,$s1,-128
addi $s4,$s4,1
li $v0,32		
addi $a0, $zero, 100		
syscall
bne $s4,20,loop
.end_macro
###############################################################################
#Reinicia o finaliza el juego dependiendo de la respuesta del usuario
.macro reiniciarjuego
mensaje reiniciar 
sw $zero, 0xFFFF0004
sw $zero, 0xFFFF0000	
LoopDeEspera:				
lw $t1, 0xFFFF0000	
blez $t1, LoopDeEspera

lw $t2, 0xFFFF0004		#Carga la respuesta
beq $t2,48,Findeljuego

move $t0,$zero
sw $zero,4($gp)
sw $zero,8($gp)
sw $zero,12($gp)
move $t8,$zero
move $t9,$zero
sw $zero, 0xFFFF0004
sw $zero, 0xFFFF0000
b Nuevojuego
.end_macro
############################################################################### 



#Este es el main desde donde se llaman las macros y se da inicio al juego
Main:
#Imprime el cartel TETRIS
cartelinicial
mensaje espera
espera			#Espera a que el usario inicie el juego pulsando una tecla
borrarcartel
Nuevojuego:
addi $t0,$t0,3
sw $t0,4($gp)		#Almaceno las vidas en memoria
lw $t0, dirs
addi $t8,$t8,500	#Tiempo inicial que tarda en bajar la pieza
addi $t9,$t9,1		#Nivel de inicio (1 naturalmente)
#Imprime los respectivos tableros
tablero
tablerovidas
tableropuntos
#Donde inicia el(los) nivel(es)
Nivel:
mensaje nivel
mensajen $t9
mensaje vidas
lw $s1,4($gp)
mensajen $s1
limpiartablero
mensaje espera2
#Espera a que el usario le de una tecla para empezar a jugar
espera
sonido			#Sonido de animacion :D
sw $zero, 0xFFFF0000	#Fines tecnicos
#Donde empieza la generacion de la pieza
SiguientePieza:
verifica
random
empiezafigura
referencia	
Mover:			
choque $s1,$s2,$s3,$s4	#Determina si despues de bajar hubo un choque
direccion		#Para mover la pieza
tiempo $t8		#Tiempo para que baje
lw $t6,0xFFFF0000 	#
beqz $t6, Bajar
direccion		#Para poder mover la pieza mas de una vez por bajada
Bajar:
choque $s1,$s2,$s3,$s4
limpiar $s1,$s2,$s3,$s4
bajar $s1,$s2,$s3,$s4	#Baja la pieza
imprimir $s1,$s2,$s3,$s4
b Mover			#Repite el ciclo hasta que choque la pieza

Findelapartida:		#Si el jugador pierde cae aca 
reiniciarjuego		#Determina si se continua o no el jeugo
Findeljuego:
li $v0,10		#Termina el juego
syscall
